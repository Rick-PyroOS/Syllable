#include <gui/checkrow.h>
#include <gui/font.h>
#include <gui/guidefines.h>
#include <util/message.h>


using namespace os;


Bitmap *CheckRow::s_pcCheckBitmap = NULL;

#define CHECK_W 10
#define CHECK_H 10

static uint8 nCheckData[] = {
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0x00, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff,
	0xff, 0xff, 0xff, 0xff
};

CheckRow::CheckRow(os::Messenger* target) : os::ListViewStringRow()
{
	m_pcTarget = target;
	m_bIsChecked = false;
	if( s_pcCheckBitmap == NULL )
	{
		Rect cCheckBitmapRect;

		cCheckBitmapRect.left = 0;
		cCheckBitmapRect.top = 0;
		cCheckBitmapRect.right = CHECK_W;
		cCheckBitmapRect.bottom = CHECK_H;

		s_pcCheckBitmap = new Bitmap( (int)cCheckBitmapRect.Width(), (int)cCheckBitmapRect.Height(  ), CS_RGBA32, Bitmap::SHARE_FRAMEBUFFER );
		memcpy( s_pcCheckBitmap->LockRaster(), nCheckData, ( unsigned int )( cCheckBitmapRect.Width(  ) * cCheckBitmapRect.Height(  ) * 4 ) );
	}
}


void CheckRow::Paint( const Rect & cFrame, View * pcView, uint nColumn, bool bSelected, bool bHighlighted, bool bHasFocus )
{
	os::Rect cRect = cFrame;
	
	pcView->SetFgColor( 255, 255, 255 );
	pcView->FillRect( cFrame );

		
	if( bSelected || bHighlighted )
	{
		Rect cSelectFrame = cFrame;
		if( nColumn == 0 ) 
		{
			cSelectFrame.left += 2;
			cSelectFrame.top += 2;
			cSelectFrame.bottom -= 2;
		}
		if( bSelected )
			pcView->SetFgColor( 186, 199, 227 );
		else
			pcView->SetFgColor( 0, 50, 200 );
			
		pcView->FillRect( cSelectFrame );
	
		/* Round edges */
		if( nColumn == 0 )
		{
			pcView->DrawLine( os::Point( cSelectFrame.left + 2, cSelectFrame.top - 2 ), 
								os::Point( cSelectFrame.right, cSelectFrame.top - 2 ) );
			pcView->DrawLine( os::Point( cSelectFrame.left, cSelectFrame.top - 1 ), 
								os::Point( cSelectFrame.right, cSelectFrame.top - 1 ) );
		
			pcView->DrawLine( os::Point( cSelectFrame.left - 2, cSelectFrame.top + 2 ), 
								os::Point( cSelectFrame.left - 2, cSelectFrame.bottom - 2 ) );
			pcView->DrawLine( os::Point( cSelectFrame.left - 1, cSelectFrame.top ), 
								os::Point( cSelectFrame.left - 1, cSelectFrame.bottom ) );
							
			pcView->DrawLine( os::Point( cSelectFrame.left + 2, cSelectFrame.bottom + 2 ), 
								os::Point( cSelectFrame.right, cSelectFrame.bottom + 2 ) );
			pcView->DrawLine( os::Point( cSelectFrame.left, cSelectFrame.bottom + 1 ), 
								os::Point( cSelectFrame.right, cSelectFrame.bottom + 1 ) );
		} 
	}

	if (nColumn == 0)
	{
		pcView->SetFgColor(0,0,0);
		pcView->SetBgColor(0,0,0);
		os::Rect cButFrame = os::Rect(cRect.left,cRect.top,cRect.left+12,cRect.top+12);
		pcView->DrawLine( Point( cButFrame.left, cButFrame.top ), Point( cButFrame.right, cButFrame.top ) );
		pcView->DrawLine( Point( cButFrame.right, cButFrame.bottom ) );
		pcView->DrawLine( Point( cButFrame.left, cButFrame.bottom ) );
		pcView->DrawLine( Point( cButFrame.left, cButFrame.top ) );
		cButFrame.Resize( 1, 1, -1, -1 );
		
		if( m_bIsChecked )
		{
			pcView->DrawBitmap( s_pcCheckBitmap, s_pcCheckBitmap->GetBounds(), os::Rect(cButFrame.left+1,cButFrame.top+1,cButFrame.left+10,cButFrame.top+10) );
		}		
	}

	if( bHighlighted )
	{
		pcView->SetFgColor( 255, 255, 255 );
		pcView->SetBgColor( 0, 50, 200 );
	}
	else if( bSelected )
	{
		pcView->SetFgColor( 0, 0, 0 );
		pcView->SetBgColor( 186, 199, 227 );
	}
	else
	{
		pcView->SetBgColor( 255, 255, 255 );
		pcView->SetFgColor( 0, 0, 0 );
	}
	if (nColumn == 0)
		cRect.Resize(15,0,0,0);
		
	pcView->DrawText(cRect,GetString(nColumn));
}

bool CheckRow::HitTest( View * pcView, const Rect & cFrame, int nColumn, Point cPos )
{
	os::Rect cCheckFrame = os::Rect(0,0,12,12);
	if (cCheckFrame.DoIntersect(cPos))
	{
		Toggle(pcView);
		return false;
	}
	return ( true );
}

void CheckRow::Toggle(os::View* pcView)
{
	if (m_bIsChecked)
		m_bIsChecked = false;
	else
		m_bIsChecked = true;
		
	pcView->Flush();
	pcView->Invalidate();
	
	if (m_pcTarget)
	{
		os::Message cMsg = os::Message(M_CHECKROW_CHANGED);
		cMsg.AddPointer("source",this);
		cMsg.AddBool("changed",m_bIsChecked);
		m_pcTarget->SendMessage(&cMsg);
	}
		
}

bool CheckRow::IsChecked()
{
	return m_bIsChecked;
}






